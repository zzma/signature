<script type="text/javascript">
    /**
     * This is the document viewer for LegalSimplicity signature documents.
     * It has the following dependencies:
     *  - Backbone.js (>= 1.0)
     *  - Underscore.js(>= 1.0)
     *  - jQuery(>1.9 or so)
     *
     *  (c) 2014 Zane Ma, LegalSimplicity. Copies may not be viewed, shared, or distributed
     *  without prior written consent.
     */

    //TODO: store calculated widths and positions in views
    'use strict';

    //A toggle variable to turn console.log on and off
    var LOG = true;

    if (!LOG && console) {
        console.log = function(){};
    }

    (function(){
        //TODO: write custom template function that changes non-ERB to ERB, templates, and returns HTML so that anyone else using underscore is unaffected
        //change to non-ERB template delimiters
        _.templateSettings = {
            evaluate: /\{%(.+?)%\}/g,
            interpolate: /\{%=(.+?)%\}/g,
            escape: /\{%-(.+?)%\}/g
        };

        var DEFAULT_SCALE = 'auto',
            DEFAULT_SCALE_DELTA = 1.1,
            MIN_SCALE = 0.1,
            MAX_SCALE = 4.0,
            MAX_AUTO_SCALE = 3.0,
            SCROLLBAR_PADDING = 40,
            DRAWN_SIG = 'sig',
            TYPED_SIG = 'text',
            VERTICAL_PADDING = 5,
            viewOnly;

        var isValidUrl =  function IsValidUrl(url, allowRelative){
            if (!url) {
                return false;
            }
            // RFC 3986 (http://tools.ietf.org/html/rfc3986#section-3.1)
            // scheme = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
            var protocol = /^[a-z][a-z0-9+\-.]*(?=:)/i.exec(url);
            if (!protocol) {
                return allowRelative;
            }
            protocol = protocol[0].toLowerCase();
            switch (protocol) {
                case 'http':
                case 'https':
                case 'ftp':
                case 'mailto':
                    return true;
                default:
                    return false;
            }
        }


        var SignatureTool = {};
        SignatureTool.DocumentPage = Backbone.Model.extend({
            defaults: {
                imageUrl: null,
                originalWidth: null,
                originalHeight: null,
                width: null,
                height: null
            },
            initialize: function DocumentPageInitialize() {
            }
        });

        SignatureTool.TagField = Backbone.Model.extend({
            defaults: {
                tag_type: null, //signature, text, checkbox, or input
                optional: false, //boolean indicating if field is optional
                page: null,
                name: null,
                value: null,
                originalPosition: {
                    x: null,
                    y: null,
                    width: null,
                    height: null
                }
                //document reference / foreign key?
            },
            initialize: function TagFieldInitialize(options) {
                if (options) {
                    //check if the field is text, when it should be input
                    if (options.tag_type == 'text') {
                        if (options.name.indexOf('1') !== 0){
                            this.set('tag_type', 'input');
                        }
                    }

                    //check if the field is optional
                    if (options.tag_type == 'input' || this.get('tag_type') == 'input'){
                        if (options.name.indexOf('*') === -1) {
                            this.set('optional', true);
                        }
                    }

                    this.set('originalPosition', {
                        x: options.x,
                        y: options.y,
                        width: options.width,
                        height: options.height
                    });
                }
            },
            isSignature: function TagFieldIsSignature(){
                return this.get('tag_type') == 'signature';
            },
            isInput: function TagFieldIsSignature(){
                return this.get('tag_type') == 'input';
            },
            isValid: function TagFieldIsValid(){
                //simple validation that a signature or value exists
                return !!this.get('value');
            },
            isRequired: function TagFieldIsRequired(){
                return !this.get('optional');
            },
            isOptional: function TagFieldIsOptional(){
                return this.get('optional');
            }
        });

        SignatureTool.TagFields = Backbone.Collection.extend({
            model: SignatureTool.TagField,
            initialize: function TagFieldsInitialize(models, options) {
            },
            //override add function to only add models for signature tags and
            //input tag fields (aka don't have a leading exclamation point)
            add: function TagFieldsAdd(models, options){
                models = _.reject(models, function(tag){
                    if (tag.tag_type == 'signature') return false;
                    if (tag.tag_type ==  'text'){
                        if (tag.name.indexOf('!') !== 0) {
                            tag.tag_type = 'input';
                            return false;
                        } else return true;
                    } else return true;
                });

                Backbone.Collection.prototype.add.call(this, models, options);
            },
            signatureFields: function TagFieldsSignatureFields(){
                return this.where({tag_type: 'signature'});
            },
            inputFields: function TagFieldInputFields(){
                return this.where({tag_type: 'input'});
            }
        });

        SignatureTool.DocumentImage = Backbone.Model.extend({
            defaults: function DocumentImageDefaults(){
                return {
                    originalWidth: 0
                }
            },
            initialize: function DocumentImageInitialize(options){
                if (options) {
                    this.set('url', options);
                }
            },
            setScale: function DocumentImageSetScale(scale){
                if (scale >= MIN_SCALE && scale <= MAX_SCALE) {
                    this.set('width', this.get('originalWidth') * scale);
                } else {
                    console.error("Invalid Document Image scale: " + scale);
                }
            }
        });
        SignatureTool.DocumentImages = Backbone.Collection.extend({
            model: SignatureTool.DocumentImage
        })

        SignatureTool.Document = Backbone.Model.extend({
            _currentPageNumber: 1,
            _loadCount: 0,
            totalPages: 0,
            _nextTagField: null,
            defaults: {
                id: null,
                download_url: null,
                images: null,
                tags: null
            },
            initialize: function DocumentInitialize(options) {
                if (options && options.images && options.tags) {
                    var tags;
                    if (!viewOnly) {
                        //only add signature and text (possibly input) fields
                        tags = _.filter(options.tags, function(tag){
                            return (tag.tag_type == 'signature' || tag.tag_type == 'text')
                        });
                    }
                    this.set({
                        images: new SignatureTool.DocumentImages(options.images),
                        tags: new SignatureTool.TagFields(tags,
                                {comparator: function(a, b){
                                    var pageA = a.get('page'),
                                        pageB = b.get('page'),
                                        yA = a.get('originalPosition').y,
                                        yB = b.get('originalPosition').y,
                                        xA = a.get('originalPosition').x,
                                        xB = b.get('originalPosition').x

                                    if (pageA > pageB) return 1;
                                    if (pageA < pageB) return -1;
                                    if (yA > yB) return -1;
                                    if (yA < yB) return 1;
                                    if (xA > xB) return 1;
                                    if (xA < xB) return -1;

                                    return 0;
                                }})
                    });

                    if (options.tags.length > 0) this._nextTagField = 0;
                    else this._nextTagField = -1;
                }

                this.totalPages = this.get('images').length;

                var self = this;
                this.get('images').each(function(image){
                    self.listenTo(image, 'change:originalWidth', self.updateLoad)
                });
            },
            firstImageWidth: function DocumentFirstImageWidth(){
                return this.get('images').at(0).get('originalWidth');
            },
            updateLoad: function DocumentUpdateLoad(model, value){
                this.stopListening(model, 'change:originalWidth');
                if (value > 0) this._loadCount += 1;
                if (this.loaded() && this._loadCallback) this._loadCallback();
            },
            onload: function DocumentOnLoad(callback) {
                this._loadCallback = callback;
                if (this.loaded()) this._loadCallback();
            },
            loaded: function DocumentLoaded() {
                return this._loadCount == this.totalPages;
            },
            get page(){
                return this._currentPageNumber;
            },
            set page(val){
                if (this.isValidPage(val)) {
                    this._currentPageNumber = val;
                }
            },
            isValidPage: function DocumentIsValidPage(val){
                return val >= 1 && val <= this.totalPages;
            },
            // returns false if no next signature, otherwise returns true and fires a
            // 'scroll' event to the signature tag model
            scrollNextSignature: function DocumentScrollNextSignature(){
                if (this._nextTagField < 0) return false;

                this.get('tags').at(this._nextTagField).trigger('scroll');

                return true;
            },
            getNextField: function DocumentGetNextField(){
                var tags = this.get('tags'),
                    tagsLength = tags.length,
                    tag;
                this._nextTagField = 0;
                tag = tags.at(this._nextTagField);
                while (this._nextTagField >= 0 && (tag.isValid() || tag.isOptional())) {
                    this._nextTagField = (this._nextTagField < tagsLength - 1) ? this._nextTagField + 1 : -1;
                    tag = tags.at(this._nextTagField);
                }

                return this._nextTagField;
            },
            //returns an object of the form {id: document_id, field_name: field_value, etc.}
            getInputData: function DocumentGetInputData(){
                var baseTagName = function BaseTagName(name){
                    return name.replace(/^!|!$/g, '').replace(/^\*|\*$/g, '');
                }
                var data = {};
                data.id = this.id;
                _.each(this.get('tags').inputFields(), function(input){
                    var val = input.get('value');
                    if (val) data[baseTagName(input.get('name'))] = val;
                });
                return data;
            }
        });

        SignatureTool.Documents = Backbone.Collection.extend({
            model: SignatureTool.Document,
            initialize: function DocumentsInitialize(models, options){
                if (options && options.currentIndex >= 0) {
                    this._currentIndex = options.currentIndex;
                }
                else {
                    this._currentIndex = 0;
                }
            },
            setScaleAll: function DocumentsSetScale(scale){
                for (var i = 0, len = this.length; i < len; i++) {
                    this._setScale(scale, i);
                }
            },
            setScaleCurrent: function DocumentsSetScaleCurrent(scale){
                return this._setScale(scale, this._currentIndex);
            },
            getCurrent: function DocumentsGetCurrent(){
                return this.at(this._currentIndex);

            },
            hasNext: function DocumentsHasNext(){
                return this._currentIndex < (this.length - 1);
            },
            getNext: function DocumentsGetNext(){
                this._currentIndex = (this._currentIndex + 1 < this.length) ? (this._currentIndex + 1) : -1;
                if (this._currentIndex != -1) {
                    this.trigger('switch', this._currentIndex); //switch the currently viewed document
                }
                return this.at(this._currentIndex);
            },
            getPrevious: function DocumentsGetPrevious(){
                this._currentIndex = (this._currentIndex - 1 >= 0) ? (this._currentIndex - 1) : -1;
                return this.at(this._currentIndex);
            },
            _setScale: function Documents_SetScale(scale, index) {
                var doc = this.at(index);

                if (!doc) {
                    console.error('Unable to find document!');
                    return;
                }

                return doc.setScale(scale);
            },
            getCurrentIndex: function DocumentsGetIndex(){
                return this._currentIndex;
            }
        });

        SignatureTool.DocumentImageView = Backbone.View.extend({
            tagName: 'div',
            className: 'imageWrapper',
            initialize: function DocumentImageViewInitialize(){
                this.img = document.createElement('img');
                this.img.setAttribute('src', this.model.get('url'));
                this.$el.append(this.img);
                this.listenToOnce(this.model, 'change:originalWidth', this.render);

                //preload the image and set the original width
                var img = new Image(), self = this;
                img.onload = function(){
                    self.model.set('originalWidth', this.width);
                }
                img.src = this.model.get('url');
            },
            render: function DocumentImageViewRender(scale){
                scale = scale || 1
                var width = this.model.get('originalWidth');

                if (width) {
                    this.$el.show();
                    this.el.style.width = (width * scale) + 'px';
                    this.img.style.width = (width * scale) + 'px';
                } else {
                    this.$el.hide();
                }

                return this;
            }
        });

        //Accepts tag_type == 'signature' TagField as a model
        SignatureTool.SignatureTagView = Backbone.View.extend({
            tagName: 'div',
            className: 'signatureField noSelect unsigned',
            initialize: function SignatureTagViewInitialize(){
                this.listenTo(this.model, 'change', this.render);
                this.listenTo(this.model, 'scroll', this.scrollTo);

                //manually added click handler
                this.$el.on('click', $.proxy(this.onClick, this));
                //remove click handler once the field has been signed
                this.listenToOnce(this.model, 'change:value', function(){
                    this.$el.off('click', this.onClick);
                });
            },
            render: function SignatureTagViewRender(scale){
                scale = scale || 1;

                this.el.style.position = 'absolute';
                this.el.style.bottom = (this.model.get('y') * scale) + 'px';
                this.el.style.left = (this.model.get('x') * scale) + 'px';
                this.el.style.height = (this.model.get('height') * scale) + 'px';
                this.el.style.width = (this.model.get('width') * scale) + 'px';

                this.el.style.fontSize = Math.round(16 * scale) + 'px';
                //see if a signature exists
                if (this.model.hasChanged('value')) {
                    this.$el.removeClass('unsigned');

                    var sigType = this.model.get('value').type,
                        sigData = this.model.get('value').data;

                    while (this.el.firstChild){
                        this.el.removeChild(this.el.firstChild);
                    }

                    if (sigType == DRAWN_SIG){
                        var i = new Image();
                        i.src = 'data:' + sigData[0] + ';base64,' + btoa(sigData[1]);
                        i.style.height = '100%';

                        this.el.appendChild(i);
                    } else if (sigType == TYPED_SIG){
                        var d = document.createElement('div');
                        d.innerHTML = sigData;
                        d.setAttribute('style', "font-family: 'tangerine', 'cursive' !important");
                        d.style.fontSize = Math.min(this.el.offsetHeight - 2, (this.el.offsetWidth/sigData.length)) + 'px';
                        d.style.lineHeight = this.el.offsetHeight + 'px';

                        this.el.appendChild(d);
                    }
                }

                return this;
            },
            scrollTo: function SignatureTagViewScrollTo(){
                var self = this;
                SignatureTool.scrollIntoView(this.el, {animate: true,
                    callback: function(){
                        self.attentionFlash();
                    }});
            },
            clickHandler: function SignatureTagViewOnClick(handler){
                this._clickHandler = handler;
            },
            onClick: function SignatureTagViewClickHandler(){
                //TODO: is this necessary?
                if (this._clickHandler) { this._clickHandler(); }

                SignatureTool.App.showModal(this.model.get('id'));
            },
            remove: function SignatureTagViewRemove(){
                this.$el.off('click', this.onClick);
                Backbone.View.prototype.remove.apply(this, arguments);
            },
            attentionFlash: function SignatureTagViewAttentionFlash(){
                SignatureTool.flashAnimation(this.$el);
            }
        });

        //Accepts tag_type == 'input' TagField as a model
        SignatureTool.InputTagView = Backbone.View.extend({
            tagName: 'input',
            className: 'inputField noSelect',
            events: {
                'keyup': 'onBlur',
                'blur': 'onBlur',
                'focus': 'onFocus'
            },
            initialize: function InputTagViewInitialize(){
                this.listenTo(this.model, 'scroll', this.scrollTo);
                this.listenTo(this.model, 'change:value', this.render);

                if (this.model.get('optional')) {
                    this.$el.addClass('optional');
                } else {
                    this.$el.addClass('required');
                }

                var val = this.model.get('value');
                if (val) this.$el.attr('value', val);
            },
            render: function InputTagViewRender(scale){
                scale = scale || 1;

                var VERT_PADDING = 0 * scale, HORIZ_PADDING = 0 * scale,
                    DEFAULT_FONT_SIZE = 14 * scale;

                this.el.style.position = 'absolute';
                this.el.style.bottom = (this.model.get('y') * scale + VERT_PADDING) + 'px';
                this.el.style.left = (this.model.get('x') * scale + HORIZ_PADDING) + 'px';
                this.el.style.height = (this.model.get('height') * scale - VERT_PADDING) + 'px';
                this.el.style.width = (this.model.get('width') * scale - HORIZ_PADDING) + 'px';

                this.el.style.fontSize = Math.round(DEFAULT_FONT_SIZE) + 'px';

                if (this.model.isValid()) {
                    this.$el.addClass('valid');
                } else {
                    this.$el.removeClass('valid');
                }
                return this;
            },
            scrollTo: function InputTagViewScrollTo(){
                var self = this;
                SignatureTool.scrollIntoView(this.el, {animate: true,
                    callback: function(){
                        self.attentionFlash();
                    }});
                this.el.focus();
            },
            clickHandler: function InputTagViewOnClick(handler){
                this._clickHandler = handler;
            },
            onClick: function InputTagViewClickHandler(evt){
                evt.target.focus();
                //TODO: is this necessary?
                if (this._clickHandler) { this._clickHandler(); }
            },
            onBlur: function InputTagViewOnBlur(evt){
                this.model.set('value', evt.target.value);
                SignatureTool.App.getNextField();
            },
            attentionFlash: function InputTagViewAttentionFlash(){
                this.el.setAttribute('placeholder', 'Please fill out this field');
                SignatureTool.flashAnimation(this.$el);
            },
            onFocus: function InputTagOnFocus(evt){
                setTimeout(function(){evt.target.select();}, 0); //needed to work on Chrome
            }
        });


        SignatureTool.DocumentView = Backbone.View.extend({
            tagName: 'div',
            className: 'documentContainer',
            docImageViews: [],
            docTagViews: [],
            initialize: function DocumentViewInitialize(options){
                if (options && options.hidden) this.hidden = options.hidden;
            },
            render: function DocumentViewRender(){
                var doc = this.model;

                //iterate through each page
                doc.get('images').each(function(image, index) {
                    var pageContent = $(document.createElement('div')).addClass('page');

                    //add the document image
                    var docImage = new SignatureTool.DocumentImageView({model: image});
                    var docTags = doc.get('tags').where({page: index + 1});

                    //add document tags to the doc image
                    _.each(docTags, function(tag){
                        var docTag;
                        if (tag.isSignature()){
                            docTag = new SignatureTool.SignatureTagView({model: tag});
                        } else if (tag.isInput()){
                            docTag = new SignatureTool.InputTagView({model: tag});
                        }

                        docImage.$el.append(docTag.render().el);
                        this.docTagViews.push(docTag);
                    }, this);

                    pageContent.append(docImage.render().el);
                    this.docImageViews.push(docImage);

                    this.$el.append(pageContent);
                }, this);

                if (this.hidden) this.$el.hide();

                return this;
            },
            setScale: function DocumentViewSetScale(scale){
                _.each(this.docImageViews, function(imageView){
                    imageView.render(scale);
                });
                _.each(this.docTagViews, function (tagView){
                    tagView.render(scale);
                });
            },
            getPageElement: function DocumentViewGetPageElement(pageNum){
                return this.$el.find('.page')[pageNum - 1];
            },
            allPageElements: function DocumentViewAllPageElements(){
                return this.$el.find('.page');
            },
            hide: function DocumentViewHide(){
                this.$el.hide();
                this.hidden = true;
            },
            show: function DocumentViewShow(){
                this.$el.show();
                this.hidden = false;
            }
        });

        SignatureTool.SignatureToolView = Backbone.View.extend({
            el: $('#' + '<%= el_id %>'),
            events: {
                'click .previous': 'previousClick',
                'click .next': 'nextClick',
                'click .zoomIn': 'zoomInClick',
                'click .zoomOut': 'zoomOutClick',
                'click .pageNumber': 'pageNumberClick',
                'click .download': 'downloadHandler',
                'change .pageNumber': 'pageNumberChange',
                'change .scaleSelect': 'scaleChange',
                'click .nextSignature': 'nextSignatureClick'
            },
            initialize: function SignatureToolViewInitialize(){
                viewOnly = (this.el.getAttribute('data-signature') != 'true');

                this.viewerView = new SignatureTool.ViewerView({el: this.$el.find('.viewerContainer'), collection: this.collection});
                this.modalView = new SignatureTool.SignatureModalView({el: this.$el.find('.signatureModal')});
            },
            previousClick: function(evt){
                SignatureTool.App.page--;
            },
            nextClick: function(evt){
                SignatureTool.App.page++;
            },
            zoomInClick: function(evt){
                SignatureTool.App.zoomIn();
            },
            zoomOutClick: function(evt){
                SignatureTool.App.zoomOut();
            },
            scaleChange: function(evt){
                SignatureTool.App.setScale(evt.target.value);
            },
            pageNumberChange: function(evt){
                SignatureTool.App.page = evt.target.value;
            },
            nextSignatureClick: function(evt){
                SignatureTool.App.scrollToNext();
            },
            downloadHandler: function(evt){
                SignatureTool.App.download();
            },
            pageNumberClick: function(evt){
                evt.target.select();
            },
            getSigJSON: function SignatureToolViewGetSigJSON(){
                return JSON.parse(this.$el.find('.sigData').attr('data-fields'));
            },
            getWidth: function SignatureToolViewGetWidth(){
                return this.viewerView.$el.width();
            },
            selectScaleOption: function SignatureToolViewSelectScaleOption(value){
                var options = this.$el.find('.scaleSelect')[0].options;
                var predefinedValueFound = false;
                for (var i = 0, len = options.length; i < len; i++) {
                    var option = options[i];
                    if (option.value != value) {
                        option.selected = false;
                        continue;
                    }
                    option.selected = true;
                    predefinedValueFound = true;
                }

                var customScaleOption = this.$el.find('.customScaleOption')[0];
                customScaleOption.selected = false;

                if (!predefinedValueFound) {
                    customScaleOption.textContent = Math.round(parseFloat(value) * 10000) / 100 + '%';
                    customScaleOption.value = true;
                    customScaleOption.selected = true;
                }

                return predefinedValueFound;
            },
            setPage: function SignatureToolViewSetPage(pageNum, isMin, isMax){
                this.$el.find('.pageNumber')[0].value = pageNum;
                this.$el.find('.previous')[0].disabled = isMin;
                this.$el.find('.next')[0].disabled = isMax;
            },
            setPageTotal: function SignatureToolViewSetPageTotal(val){
                this.$el.find('.numPages')[0].innerHTML = 'of ' + val;
            },
            enableSubmit: function SignatureToolViewEnableSubmit(hasNext){
                var $finishButton = this.$el.find('.finishSigning');
                if ($finishButton.hasClass('inactive')){
                    $finishButton.removeClass('inactive');
                    $finishButton.on('click', this.finishDocument);

                    SignatureTool.flashAnimation($finishButton);
                }
            },
            disableSubmit: function SignatureToolViewDisableSubmit(hasNext){
                var $finishButton = $(this.$el.find('.finishSigning')[0]);
                if (!$finishButton.hasClass('inactive')) {
                    $finishButton.addClass('inactive');
                    $finishButton.off('click', this.finishDocument);

                    if (hasNext){
                        $finishButton.html('Next <span class="desktop-only-inline">Document</span>');
                    } else {
                        $finishButton.html('Submit <span class="desktop-only-inline">Document</span>');
                    }
                }

            },
            disableNext: function SignatureToolViewDisableNext(){
                this.$el.find('.nextSignature').addClass('inactive');
            },
            enableNext: function SignatureToolViewEnableNext(){
                this.$el.find('.nextSignature').removeClass('inactive');
            },
            finishDocument: function SignatureToolViewFinishDocument(evt){
                SignatureTool.App.finishDocument();
            },
            updateForm: function SignatureToolViewUpdateForm(docId, data){
                if (docId === undefined) return;

                var sigForm = this.$el.find('.sig_form')[0];
                _.each(data, function(val, key){
                    var input = document.createElement('input');
                    input.setAttribute('type', 'hidden');
                    input.setAttribute('name', 'tags[' + docId + '][' + key + ']');
                    input.setAttribute('value', val);
                    sigForm.appendChild(input);
                }, this);
            },
            submitForm: function SignatureToolViewSubmitForm(sig){
                var sigType = this.$el.find('.sig_type')[0],
                    sigData = this.$el.find('.sig_data')[0],
                    sigForm = this.$el.find('.sig_form')[0];

                if (sig.type == DRAWN_SIG){
                    sigType.value = DRAWN_SIG;
                    sigData.value = this.modalView.$signaturePad.jSignature('getData', 'default');
                } else if (sig.type == TYPED_SIG){
                    sigType.value = TYPED_SIG;
                    sigData.value = sig.data;
                }
                sigForm.submit();
            }
        });

        /**
         * Requires el to be set on view creation
         */
        SignatureTool.ViewerView = Backbone.View.extend({
            docViews: [],
            events: {

            },
            initialize: function ViewerViewInitialize(){
                this.listenTo(this.collection, 'add', this.addDocument);
                this.listenTo(this.collection, 'switch', this.switchDocument);
            },
            addDocument: function ViewerViewAddDocument(doc, coll){
                var view = (this.docViews.length > 0) ? new SignatureTool.DocumentView({model: doc, hidden: true}) : new SignatureTool.DocumentView({model: doc});
                this.$el.append(view.render().el);
                this.docViews.push(view);
            },
            switchDocument: function ViewerViewSwitchDocument(docIndex){
                _.each(this.docViews, function(view){
                    view.hide();
                });
                this.docViews[docIndex].show();
            }
        });

        /**
         * Requires el to be set on view creation
         */
        SignatureTool.SignatureModalView = Backbone.View.extend({

            events: {
                'click .cancelSignature': 'hide',
                'click .drawSignatureTab': 'showDrawTab',
                'click .typeSignatureTab': 'showTypeTab',
                'click .agreeSignature': 'checkTerms',
                'click .signSignature': 'checkSignature',
                'keyup .nameInput': 'typeSignature'
            },
            undoButtonRenderer: function SignatureModalViewUndoButtonRenderer(){
                // TODO: make sure this works with multiple viewers
                var $undoButton = $('<input type="button" value="Undo" class="undoButton" />')
                        .appendTo(this.$controlbarUpper)
                return $undoButton;
            },
            initialize: function SignatureModalViewInitialize(){
                this.drawTab = this.$el.find('.drawSignatureTab')[0];
                this.typeTab = this.$el.find('.typeSignatureTab')[0];
                this.drawPad = this.$el.find('.signaturePad')[0];
                this.typePad = this.$el.find('.signatureTypeWrapper')[0];
                this.showDrawTab();

                this.typeText = this.$el.find('.signatureType')[0];
                this.setTypeFont('tangerine');

                this.signButton = this.$el.find('.signSignature')[0];
                this.disableSignButton();

                this.nameInput = this.$el.find('.nameInput')[0];
                this.agreeCheckbox = this.$el.find('.agreeSignature')[0];

                //The element needs to be part of the DOM at initiation
                this.$signaturePad = $(this.drawPad).jSignature({
                    'UndoButton': this.undoButtonRenderer
                });
                this.hide();

            },
            show: function SignatureModalViewShow(){
                this.el.style.opacity = 1;
                this.$el.removeClass('sigHidden');
            },
            hide: function SignatureModalViewHide(){
                this.el.style.opacity = 0;
                this.$el.addClass('sigHidden');
            },
            showDrawTab: function SignatureModalViewShowDrawTab(){
                $(this.drawTab).addClass('active');
                $(this.typeTab).removeClass('active');
                $(this.drawPad).removeClass('sigHidden');
                $(this.typePad).addClass('sigHidden');
            },
            showTypeTab: function SignatureModalViewShowTypeTab(){
                $(this.typeTab).addClass('active');
                $(this.drawTab).removeClass('active');
                $(this.typePad).removeClass('sigHidden');
                $(this.drawPad).addClass('sigHidden');
            },
            checkTerms: function SignatureModalViewCheckTerms(evt){
                if (evt.target.checked) this.enableSignButton();
                else this.disableSignButton();
            },
            enableSignButton: function SignatureModalViewEnableSignButton(){
                $(this.signButton).removeClass('inactive');
            },
            disableSignButton: function SignatureModalViewDisableSignButton(){
                $(this.signButton).addClass('inactive');
            },
            // set fancy signature type font
            setTypeFont: function SignatureModalViewSetTypeFont(fontName){
                //Eagerly load a custom font
                var s = document.createElement('span');
                s.innerHTML = '&nbsp;';
                s.setAttribute('style', "font-family: '" + fontName + "' !important");
                s.style.visibility = 'hidden';
                s.style.position = 'absolute';
                s.style.top = '0px';
                s.style.left = '0px';
                s.style.height = '0px';
                s.style.width = '0px';
                document.body.appendChild(s);

                if (!this.typeText) {
                    console.warn('typeText not assigned yet');
                    return;
                }

                this.typeText.setAttribute('style', "font-family: '" + fontName + "', 'cursive' !important");
            },
            typeSignature: function SignatureModalViewTypeSignature(evt){
                this.typeText.innerHTML = evt.target.value;
            },
            checkSignature: function SignatureModalViewApplySignature(evt){
                if ($(this.drawTab).hasClass('active')
                    && this.$signaturePad.jSignature('getData', 'native').length === 0){
                    this.displayError('Please draw your signature');
                    return;
                }
                if ($(this.typeTab).hasClass('active') && !this.nameInput.value){
                    this.displayError('Please type your signature');
                    return;
                }
                if (!this.agreeCheckbox.checked){
                    this.displayError('Please agree to the Terms of Service');
                    return;
                }

                //extract the Signature, either as a bitmap or typed text
                var sig = SignatureTool.Signature, s;
                if ($(this.typeTab).hasClass('active')) {
                    s = new sig({type: TYPED_SIG, data: this.nameInput.value});
                } else if ($(this.drawTab).hasClass('active')) {
                    s = new sig({type: DRAWN_SIG, data: this.$signaturePad.jSignature('getData', 'svg')});
                }

                SignatureTool.App.applySignature(s);

                this.hide();
            },
            displayError: function SignatureModalViewDisplayError(err){
                alert(err);
            }
        });

        SignatureTool.Signature = Backbone.Model.extend({
            defaults: {
                type: null,
                data: null
            },
            initialize: function SignatureInitialize(){}
        });


        //GLOBALLY ACCESSIBLE HELPER FUNCTIONS
        /**
         *
         * @param element - DOM element to be scrolled to
         * @param options - {spot: {top: height offset, left: horizontal offset},
         *                   animate: boolean,
         *                   callback: callback function once scroll has completed}
         */
        SignatureTool.scrollIntoView = function ScrollIntoView(element, options) {
            options = options || {};
            // Assuming offsetParent is available (it's not available when viewer is in
            // hidden iframe or object).
            var parent = element.offsetParent;
            var offsetY = element.offsetTop + element.clientTop;
            var offsetX = element.offsetLeft + element.clientLeft;
            if (!parent) {
                console.warn('offsetParent is not set -- cannot scroll');
                return;
            }
            while (parent.clientHeight === parent.scrollHeight) {
                if (parent.dataset._scaleY) {
                    offsetY /= parent.dataset._scaleY;
                    offsetX /= parent.dataset._scaleX;
                }
                offsetY += parent.offsetTop;
                offsetX += parent.offsetLeft;
                parent = parent.offsetParent;
                if (!parent) {
                    return; // no need to scroll
                }
            }
            if (options.spot) {
                var spot = options.spot;
                if (spot.top !== undefined) {
                    offsetY += spot.top;
                }
                if (spot.left !== undefined) {
                    offsetX += spot.left;
                    parent.scrollLeft = offsetX;
                }
            }

            var SCROLL_TOP_PADDING = 10;
            if (options.animate) {
                $(parent).animate({scrollTop: offsetY - SCROLL_TOP_PADDING}, 500, function(){
                    if (options.callback) options.callback();
                });
            } else {
                parent.scrollTop = offsetY - SCROLL_TOP_PADDING;
                if (options.callback) options.callback();
            }
        }
        SignatureTool.flashAnimation = function FlashAnimation($el, duration){
            duration = duration || 300;

            $el.animate({opacity: 0.25}, duration, function(){
                $el.animate({opacity: 1}, duration, function(){
                    $el.animate({opacity: 0.25}, duration, function(){
                        $el.animate({opacity: 1}, duration);
                    });
                });
            });
        }

        SignatureTool.MainController = function(){
            var controller = {
                currentScale: null,
                currentScaleValue: null,
                selectedSignatureTag: null,
                signature: null,
                initialize: function MainControllerInitialize(){
                    console.log('DOM-loaded: Initializing Main Controller.');
                    this.docs = new SignatureTool.Documents(null, {currentIndex: 0});
                    this.viewer = new SignatureTool.SignatureToolView({collection: this.docs});

                    //find and read the required document / tag field data
                    this.docs.add(this.viewer.getSigJSON());

                    //wait until the document images have been loaded
                    var self = this;
                    this.docs.getCurrent().onload(function(){
                        //set the initial scale
                        self.setScale(DEFAULT_SCALE);
                        //initialize paging
                        self.initializePages();
                    });

                    this.viewer.enableNext();
                    this.viewer.disableSubmit(this.docs.hasNext());
                },
                setScale: function MainControllerSetScale(scale, docIndex){
                    docIndex = docIndex || 0;

                    var value = parseFloat(scale);
                    var doc = this.docs.at(docIndex);

                    if (isNaN(value)) {
                        var firstPageWidth = doc.firstImageWidth();
                        var pageWidthScale = (this.viewer.getWidth() - SCROLLBAR_PADDING) / firstPageWidth;

                        switch (scale) {
                            case 'auto':
                                value = Math.min(MAX_AUTO_SCALE, pageWidthScale);
                                break;
                            default:
                                console.error('Invalid zoom value: ' + value);
                                return;
                        }
                    }

                    this.currentScale = scale;
                    this.currentScaleValue = value;

                    value = value.toFixed(2);

                    this._docView(docIndex).setScale(value);
                    this.viewer.selectScaleOption(scale);
                },
                zoomIn: function MainControllerZoomIn(ticks){
                    var newScale = this.currentScaleValue;
                    do {
                        newScale = (newScale * DEFAULT_SCALE_DELTA).toFixed(2);
                        newScale = Math.ceil(newScale * 10) / 10;
                        newScale = Math.min(MAX_SCALE, newScale);
                    } while (--ticks && newScale > MAX_SCALE);
                    this.setScale(newScale);
                },
                zoomOut: function MainControllerZoomOut(ticks){
                    var newScale = this.currentScaleValue;
                    do {
                        newScale = (newScale / DEFAULT_SCALE_DELTA).toFixed(2);
                        newScale = Math.floor(newScale * 10) / 10;
                        newScale = Math.max(MIN_SCALE, newScale);
                    } while (--ticks && newScale < MIN_SCALE);
                    this.setScale(newScale);
                },
                get page(){
                    return this.docs.getCurrent().page;
                },
                set page(val){
                    if (this.docs.getCurrent().isValidPage(val)) {
                        //change the page number
                        this.docs.getCurrent().page = val;

                        //change the input page number
                        this.viewer.setPage(val, val <= 1, val >= this.docs.getCurrent().totalPages);

                        if (!this.currentlyScrolling) {
                            //scroll the page into view
                            var pageEl = this._docView(this.docs.getCurrentIndex()).getPageElement(val);
                            SignatureTool.scrollIntoView(pageEl);
                        }
                    }
                },
                scrollToNext: function MainControllerScrollToNext(){
                    this.docs.getCurrent().scrollNextSignature();
                },
                showModal: function MainControllerShowModal(tagFieldId){
                    this.selectedSignatureTag = tagFieldId;
                    // only show if no signature is already present
                    if (!this.signature) {
                        this.viewer.modalView.show();
                    } else {
                        this.applySignature();
                    }
                },
                initializePages: function MainControllerInitializePages(){
                    this.page = 1;
                    this.viewer.setPageTotal(this.docs.getCurrent().totalPages);
                    var self = this;
                    this.viewer.viewerView.el.addEventListener('scroll', function viewerScroll(evt){
                        var visible = self.getVisiblePages(evt.target, true);
                        var visiblePages = visible.views;
                        if (visiblePages.length === 0) {
                            return;
                        }

                        var currentPage = self.page, stillFullyVisible;

                        for (var i = 0, len = visiblePages.length, stillFullyVisible = false; i < len; i++) {
                            var page = visiblePages[i];

                            if (page.percent < 100) {
                                break;
                            }
                            if (page.pageNum === self.page) {
                                stillFullyVisible = true;
                                break;
                            }
                        }

                        if (!stillFullyVisible) {
                            currentPage = visiblePages[0].pageNum;
                        }

                        self.currentlyScrolling = true;
                        self.page = currentPage;
                        self.currentlyScrolling = false;
                    });
                },
                getVisiblePages: function MainControllerGetVisiblePages(scrollEl, sortByVisibility){
                    var top = scrollEl.scrollTop, bottom = top + scrollEl.clientHeight;
                    var left = scrollEl.scrollLeft, right = left + scrollEl.clientWidth;

                    var visible = [], view;
                    var currentHeight, viewHeight, hiddenHeight, percentHeight;
                    var currentWidth, viewWidth;
                    var views = this._docView().allPageElements();

                    for (var i = 0, len = views.length; i < len; ++i) {
                        view = views[i];
                        currentHeight = view.offsetTop + view.clientTop;
                        viewHeight = view.clientHeight;
                        if ((currentHeight + viewHeight) < top) {
                            continue;
                        }
                        if (currentHeight > bottom) {
                            break;
                        }
                        currentWidth = view.offsetLeft + view.clientLeft;
                        viewWidth = view.clientWidth;
                        if ((currentWidth + viewWidth) < left || currentWidth > right) {
                            continue;
                        }
                        hiddenHeight = Math.max(0, top - currentHeight) +
                                Math.max(0, currentHeight + viewHeight - bottom);
                        percentHeight = ((viewHeight - hiddenHeight) * 100 / viewHeight) | 0;

                        visible.push({ pageNum: i + 1, x: currentWidth, y: currentHeight,
                            view: view, percent: percentHeight });
                    }

                    var first = visible[0];
                    var last = visible[visible.length - 1];

                    if (sortByVisibility) {
                        visible.sort(function(a, b) {
                            var pc = a.percent - b.percent;
                            if (Math.abs(pc) > 0.001) {
                                return -pc;
                            }
                            return a.id - b.id; // ensure stability
                        });
                    }
                    return {first: first, last: last, views: visible};
                },
                applySignature: function MainControllerApplySignature(sig){
                    var tag = this.docs.getCurrent().get('tags').findWhere({id: this.selectedSignatureTag});

                    if (!this.signature) {
                        this.signature = {data: sig.get('data'), type: sig.get('type')};
                        tag.set('value', {data: sig.get('data'), type: sig.get('type')});
                    } else {
                        tag.set('value', {data: this.signature.data, type: this.signature.type});
                    }

                    this.selectedSignatureTag = null;
                    this.getNextField();
                },
                getNextField: function MainControllerGetNextField(){
                    if (this.docs.getCurrent().getNextField() === -1){
                        this.viewer.disableNext();
                        this.viewer.enableSubmit();
                    } else {
                        this.viewer.enableNext();
                        this.viewer.disableSubmit();
                    }
                },
                finishDocument: function MainControllerFinishDocument(){
                    //process document input information
                    var current = this.docs.getCurrent();
                    this.viewer.updateForm(current.get('id'), current.getInputData());

                    //move to the next document, or submit
                    if (this.docs.hasNext()){
                        //set up the next document
                        this.docs.getNext();

                        //reset scale, footer buttons and toolbar pages
                        this.setScale(DEFAULT_SCALE);
                        this.viewer.enableNext();
                        this.viewer.disableSubmit(this.docs.hasNext());
                        this.page = 1;
                        this.viewer.setPageTotal(this.docs.getCurrent().totalPages);
                    } else {
                        //submit the document info through a form
                        this.viewer.submitForm(this.signature);
                    }
                },
                //download the current document
                download: function MainControllerDownload(){
                    var url = location.origin + this.docs.getCurrent().get('download_url');

                    if (!isValidUrl(url)) {
                        alert('Download failed: Invalid download url.');
                        return;
                    }

                    var filename = this._extractFilename(url);

                    var a = document.createElement('a');
                    if (a.click) {
                        // Use a.click() if available. Otherwise, Chrome might show
                        // "Unsafe JavaScript attempt to initiate a navigation change
                        //  for frame with URL" and not open the PDF at all.
                        // Supported by (not mentioned = untested):
                        // - Firefox 6 - 19 (4- does not support a.click, 5 ignores a.click)
                        // - Chrome 19 - 26 (18- does not support a.click)
                        // - Opera 9 - 12.15
                        // - Internet Explorer 6 - 10
                        // - Safari 6 (5.1- does not support a.click)
                        a.href = url;
                        a.target = '_parent';
                        // Use a.download if available. This increases the likelihood that
                        // the file is downloaded instead of opened by another PDF plugin.
                        if ('download' in a) {
                            a.download = filename;
                        }
                        // <a> must be in the document for IE and recent Firefox versions.
                        // (otherwise .click() is ignored)
                        (document.body || document.documentElement).appendChild(a);
                        a.click();
                        a.parentNode.removeChild(a);
                    } else {
                        window.open(url, '_parent');

                        var hiddenIFrameID = 'hiddenDownloader',
                                iframe = document.getElementById(hiddenIFrameID);
                        if (iframe === null) {
                            iframe = document.createElement('iframe');
                            iframe.id = hiddenIFrameID;
                            iframe.style.display = 'none';
                            document.body.appendChild(iframe);
                        }
                        iframe.src = url;
                    }
                },
                reflowDOM: function MainControllerReflowDOM(){
                    this.viewer.$el.hide();
                    this.viewer.$el.show();
                },
                _docView: function MainController_DocView(index){
                    if (index !== undefined && index >= 0) {
                        return this.viewer.viewerView.docViews[index];
                    } else if (index === undefined){
                        return this.viewer.viewerView.docViews[this.docs.getCurrentIndex()];
                    }
                },
                _extractFilename: function MainController_ExtractFilename(url){
                    if (!url || url.indexOf('/') === -1) return url;

                    var filename = url.split('/');
                    filename = filename[filename.length - 1];
                    filename = filename.split('?');
                    filename = filename[0];

                    if (!filename || filename.indexOf('.') === -1) return url;

                    return filename;
                }
            }

            controller.initialize();
            return controller;
        }


        $(function(){
            SignatureTool.App = new SignatureTool.MainController();
            var styles = document.getElementById('signatureStylesheet');
            if (styles && styles.sheet && styles.sheet.rules) {
                console.log('Stylesheet already loaded');
                SignatureTool.App.reflowDOM();
            } else {
                styles.onload = function(){
                    console.log('Stylesheet loaded!');
                    SignatureTool.App.reflowDOM();
                }
            }
        });

    })();
</script>
